name: Run Gradle on PRs
on:
  push:
    branches:
      - main
jobs:
  gradle:
    strategy:
      matrix:
        os: [windows-latest]
        # os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

#    steps:
#
#      - name: echo Current OS
#        run: echo " currentOs = ${{ runner.os }}"
#
#
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          distribution: temurin
#          java-version: 17
#
#      - name: Setup Gradle
#        uses: gradle/gradle-build-action@v2
#        with:
#          gradle-version: 7.5.1
#
#      - name: Execute Gradle build
#        id: gradle-build
#        run: ./gradlew packageDistributionForCurrentOS
#
#      - run: pwd
#
#      - name: Upload APK
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ steps.gradle-build.outputs.app_pkg_name }}
#          path: |
#            ${{ steps.gradle-build.outputs.app_pkg_path }}
#
#      - name: Create ${{ matrix.os }} Release
#        if: runner.os == 'Linux'
#        id: create_release_Linux
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.PUBLISH_PACKAGE }}
#        with:
#          tag_name: ${{ github.run_number }}
#          release_name: Release Linux ${{ github.ref }}
#          allowUpdates: true
#
#      - name: Create ${{ matrix.os }} Release
#        if: runner.os == 'Windows'
#        id: create_release_Windows
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.PUBLISH_PACKAGE }}
#        with:
#          tag_name: ${{ github.run_number }}
#          release_name: Release Windows ${{ github.ref }}
#          allowUpdates: true
#
#      - name: Create ${{ matrix.os }} Release
#        if: runner.os == 'macOS'
#        id: create_release_macOS
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.PUBLISH_PACKAGE }}
#        with:
#          tag_name: ${{ github.run_number }}
#          release_name: Release macOS ${{ github.ref }}
#          allowUpdates: true
#
#      - name: Upload Linux Release Package
#        id: upload_linux_release_asset
#        if: runner.os == 'Linux'
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.PUBLISH_PACKAGE }}
#        with:
#          upload_url: ${{ steps.create_release_Linux.outputs.upload_url }}
#          asset_path: build/compose/binaries/main/deb/passwd_1.0.0-1_amd64.deb
#          asset_name: ${{ github.event.repository.name }}  ${{ steps.branch-name.outputs.current_branch }} v${{ github.run_number }}.${{ github.run_attempt }}.deb
#          asset_content_type: application/zip
#
#      - name: Upload Windows Release Package
#        id: upload_windows_release_asset
#        if: runner.os == 'Windows'
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.PUBLISH_PACKAGE }}
#        with:
#          upload_url: ${{ steps.create_release_Windows.outputs.upload_url }}
#          asset_path: build\compose\binaries\main\msi\Passwd-1.0.0.msi
#          asset_name: ${{ github.event.repository.name }}  ${{ steps.branch-name.outputs.current_branch }} v${{ github.run_number }}.${{ github.run_attempt }}.msi
#          asset_content_type: application/zip
#
#      - name: Upload Macos Release Package
#        id: upload_macos_release_asset
#        if: runner.os == 'macOS'
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.PUBLISH_PACKAGE }}
#        with:
#          upload_url: ${{ steps.create_release_macOS.outputs.upload_url }}
#          asset_path: build/compose/binaries/main/dmg/Passwd-1.0.0.dmg
#          asset_name: ${{ github.event.repository.name }}  ${{ steps.branch-name.outputs.current_branch }} v${{ github.run_number }}.${{ github.run_attempt }}.dmg
#          asset_content_type: application/zip
